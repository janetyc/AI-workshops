# %% [javascript]
//read data from DF
data_url = "[DATASET_URL]";

$.get(data_url, function(data){
  console.log(data);
});
# %% [javascript]
//create a fake data to test out the algorithm
data = [
  ["obj1", "obj2", "obj3", "obj1"],
  ["obj1", "obj3", "obj3"],
  ["obj3", "obj4"],
  ["obj2"],
  ["obj1", "obj5"],
  ["obj3"],
  ["obj5", "obj2"],
  ["obj1", "obj4", "obj6"],
  ["obj2", "obj6", "obj5", "obj1"],
  ["obj4", "obj5"] 
]

# %% [javascript]
obj_img_map = {}
data.forEach((obj_list, indx) => {
  obj_list.forEach(obj => {
  	if(obj in obj_img_map){
      obj_img_map[obj].push(indx)  
    }else{
      obj_img_map[obj] = []
      obj_img_map[obj].push(indx)
    }  
  })
    
})
console.log(obj_img_map);
# %% [javascript]
object_net = {}

for(obj_1 in obj_img_map){

  if(!(obj_1 in object_net)){
    object_net[obj_1] = {};
  }

  for(obj_2 in obj_img_map){
    if(obj_2 == obj_1){
      object_net[obj_1][obj_2] = 1.0;
      continue;
    }

	if(!(obj_2 in object_net[obj_1])){
      let intersection = obj_img_map[obj_1].filter(x => obj_img_map[obj_2].includes(x));
      let union = [...obj_img_map[obj_1], ...obj_img_map[obj_2]];
	  
      score = (new Set(intersection)).size*1.0 / (new Set(union)).size;
    }
	object_net[obj_1][obj_2] = score;
  }
}

for(obj in object_net){
  console.log(object_net[obj]);
}