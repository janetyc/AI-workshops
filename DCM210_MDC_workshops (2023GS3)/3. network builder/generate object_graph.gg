# %% [javascript]
//read data from DF
data_url = "<DATA_URL_FROM__DF>";
var jdata = await fetch(data_url);  
var jsonData = await jdata.json();

var object_data = [];
  for(d in jsonData){
    if(jsonData[d].detections != ""){
      object_data.push(jsonData[d].detections.split(","));  
    }
  }
console.log(object_data);
# %% [javascript]
//create a fake data to test out the algorithm
data = [
  ["obj1", "obj2", "obj3", "obj1"],
  ["obj1", "obj3", "obj3"],
  ["obj3", "obj4"],
  ["obj2"],
  ["obj1", "obj5"],
  ["obj3"],
  ["obj5", "obj2"],
  ["obj1", "obj4", "obj6"],
  ["obj2", "obj6", "obj5", "obj1"],
  ["obj4", "obj5"] 
]

# %% [javascript]
obj_img_map = {}
data.forEach((obj_list, indx) => {
  obj_list.forEach(obj => {
  	if(obj in obj_img_map){
      obj_img_map[obj].push(indx)  
    }else{
      obj_img_map[obj] = []
      obj_img_map[obj].push(indx)
    }  
  })
    
})
console.log(obj_img_map);
# %% [javascript]
object_net = {}

for(obj_1 in obj_img_map){

  if(!(obj_1 in object_net)){
    object_net[obj_1] = {};
  }

  for(obj_2 in obj_img_map){
    if(obj_2 == obj_1){
      object_net[obj_1][obj_2] = 1.0;
      continue;
    }

	if(!(obj_2 in object_net[obj_1])){
      let intersection = obj_img_map[obj_1].filter(x => obj_img_map[obj_2].includes(x));
      let union = [...obj_img_map[obj_1], ...obj_img_map[obj_2]];
	  
      score = (new Set(intersection)).size*1.0 / (new Set(union)).size;
    }
	object_net[obj_1][obj_2] = score;
  }
}

for(obj in object_net){
  console.log(object_net[obj]);
}
# %% [javascript]
//calculate graph: convert network data into json file
function calculateGraph(data){
  obj_img_map = {}
  data.forEach((obj_list, indx) => {
    obj_list.forEach(obj => {
    	if(obj in obj_img_map){
        obj_img_map[obj].push(indx)  
      }else{
        obj_img_map[obj] = []
        obj_img_map[obj].push(indx)
      }  
    })
  })
  
  object_net = {}

  for(obj_1 in obj_img_map){
    if(!(obj_1 in object_net)){
      object_net[obj_1] = {};
    }
  
    for(obj_2 in obj_img_map){
      if(obj_2 == obj_1){
        object_net[obj_1][obj_2] = 1.0;
        continue;
      }
  
      if(!(obj_2 in object_net[obj_1])){
        let intersection = obj_img_map[obj_1].filter(x => obj_img_map[obj_2].includes(x));
        let union = [...obj_img_map[obj_1], ...obj_img_map[obj_2]];
  	  
        score = (new Set(intersection)).size*1.0 / (new Set(union)).size;
      }
      object_net[obj_1][obj_2] = score;
    }
  }
  
  let graph_data = {
    "nodes": [],
    "links": []
  }
  
  Object.keys(object_net).forEach(function(obj1, ind1) {
    graph_data["nodes"].push({
      "id": obj1,
      "group": 1
    });
  
    Object.keys(object_net).forEach(function(obj2, ind2) {	
      if(obj1 != obj2){
        graph_data["links"].push({
          "source": ind1,
          "target": ind2,
          "weight": object_net[obj1][obj2]
        });
      }
    });
  });
  
  //turn it to json
  return graph_data;
  
}
# %% [javascript]
graph = calculateGraph(object_data);
console.log(graph);